# main.py
import logging
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from config import BOT_TOKEN, WEBHOOK_URL, WEBHOOK_PORT
from alarms_data import find_matching_alarms
from crm_integration import create_crm_deal

# States
AUTOSTART, GSM, GPS, PHONE = range(4)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    await update.message.reply_text(
        f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ —Ç–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å!\n\n"
        "‚ÅâÔ∏è –î–∞–≤–∞–π —Ä–µ—à–∏–º, —á—Ç–æ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ—Ç—å"
    )

    await ask_autostart(update, context)
    return AUTOSTART


async def ask_autostart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [['üòâ –° –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º', 'ü•∂ –ë–ï–ó –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "1Ô∏è‚É£ –ù—É–∂–µ–Ω –ª–∏ —Ç–µ–±–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫?\n\n"
        "‚ùÑÔ∏è –í —É—Å–ª–æ–≤–∏—è—Ö –Ω–∞—à–µ–≥–æ –∫–ª–∏–º–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≥—Ä–µ–≤–∞—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –ø–æ–µ–∑–¥–∫–æ–π. "
        "–î–∞–∂–µ –µ—Å–ª–∏ –Ω–∞ —É–ª–∏—Ü–µ –Ω–µ—Å–∏–ª—å–Ω—ã–π –º–æ—Ä–æ–∑! –≠—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –∏–∑–Ω–æ—Å –¥–≤–∏–≥–∞—Ç–µ–ª—è.\n\n"
        "–í –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ —Å–µ—Å—Ç—å –≤ –ø—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å üòå\n\n"
        "‚ùì–ö–∞–∫—É—é —Å–∏—Å—Ç–µ–º—É –≤—ã–±–µ—Ä–µ—à—å?",
        reply_markup=reply_markup
    )


async def handle_autostart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        context.user_data['autostart'] = '–° –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫–æ–º' in choice

        await ask_gsm(update, context)
        return GSM
    except Exception as e:
        logger.error(f"Error in handle_autostart: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ /start")
        return ConversationHandler.END


async def ask_gsm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [['üòé –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ', 'üìµ –ë—Ä–µ–ª–æ–∫']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "2Ô∏è‚É£ –ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π? –ë—Ä–µ–ª–æ–∫ –∏–ª–∏ GSM-–º–æ–¥—É–ª—å\n\n"
        "–ú–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ –±—Ä–µ–ª–æ–∫, –Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ —Å–∏–≥–Ω–∞–ª —Ç—Ä–µ–≤–æ–≥–∏ –æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ –±—Ä–µ–ª–∫–∞ "
        "–Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ç–∞–±–∏–ª–µ–Ω –∏ –µ—Å—Ç—å —à–∞–Ω—Å –Ω–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª —Ç—Ä–µ–≤–æ–≥–∏ ‚õîÔ∏è\n\n"
        "–ß–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –≤ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "
        "–≤ —Å–ª—É—á–∞–µ —Ç—Ä–µ–≤–æ–≥–∏ –∏ —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ üëè\n\n"
        "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ‚ùì",
        reply_markup=reply_markup
    )


async def handle_gsm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        context.user_data['gsm'] = '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' in choice

        await ask_gps(update, context)
        return GPS
    except Exception as e:
        logger.error(f"Error in handle_gsm: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ /start")
        return ConversationHandler.END


async def ask_gps(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [['üïµüèª‚Äç‚ôÇÔ∏è –° GPS-–∞–Ω—Ç–µ–Ω–Ω–æ–π', 'üôà –ë–ï–ó GPS-–∞–Ω—Ç–µ–Ω–Ω—ã']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å! 3Ô∏è‚É£ GPS-–∞–Ω—Ç–µ–Ω–Ω–∞\n\n"
        "üó∫ –ï—Å–ª–∏ –≤—ã —á–∞—Å—Ç–æ –¥–∞–µ—Ç–µ –º–∞—à–∏–Ω—É —á—É–∂–∏–º –ª—é–¥—è–º –∏ –≤–∞–º –≤–∞–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å "
        "—Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —Ç–æ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å GPS.\n\n"
        "–í–∞—à –≤–∞—Ä–∏–∞–Ω—Ç‚ùì",
        reply_markup=reply_markup
    )


async def handle_gps(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        context.user_data['gps'] = '–° GPS-–∞–Ω—Ç–µ–Ω–Ω–æ–π' in choice

        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–π
        alarms = find_matching_alarms(
            context.user_data['autostart'],
            context.user_data['gsm'],
            context.user_data['gps']
        )

        await show_recommendations(update, context, alarms)
        return PHONE
    except Exception as e:
        logger.error(f"Error in handle_gps: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ /start")
        return ConversationHandler.END


async def show_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE, alarms: list) -> None:
    try:
        user_data = context.user_data

        message = (
            f"üîç –î–ª—è –≤–∞—Å –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–ª–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n\n"
            f"‚Ä¢ {'‚úÖ' if user_data['autostart'] else '‚ùå'} {'–°' if user_data['autostart'] else '–ë–ï–ó'} –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞\n"
            f"‚Ä¢ {'üì±' if user_data['gsm'] else 'üìü'} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {'–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' if user_data['gsm'] else '–±—Ä–µ–ª–æ–∫'}\n"
            f"‚Ä¢ {'‚úÖ' if user_data['gps'] else '‚ùå'} {'–°' if user_data['gps'] else '–ë–ï–ó'} GPS-–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n\n"
        )

        if alarms:
            message += f"–ù–∞—à–ª–æ—Å—å {len(alarms)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏—Å—Ç–µ–º:\n\n"

            for alarm in alarms:
                features = []
                if alarm['autostart']: features.append("–∞–≤—Ç–æ–∑–∞–ø—É—Å–∫")
                if alarm['remote']: features.append("–±—Ä–µ–ª–æ–∫")
                if alarm['gsm']: features.append("–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                if alarm['gps']: features.append("GPS")

                message += (
                    f"üêº {alarm['name']}\n"
                    f"‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {', '.join(features)}\n"
                    f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {alarm['price']}\n"
                    f"‚Ä¢ –°—Å—ã–ª–∫–∞: {alarm['link']}\n\n"
                )
        else:
            message += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏—Å—Ç–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢\n"

        await update.message.reply_text(message, reply_markup=ReplyKeyboardRemove())

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        context.user_data['recommended_alarms'] = alarms

        # –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = [[KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
            "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —Ç–≤–æ–π –∞–≤—Ç–æ?üí∞\n\n"
            "–û—Å—Ç–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞—à –º–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ãüìû\n\n"
            "–ú—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ Pandora –∏ StarLine –≤ –°–∞–º–∞—Ä–µ üë®üèª‚Äçüîß\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üëá",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in show_recommendations: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ /start")


async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if update.message.contact:
            phone = update.message.contact.phone_number
        else:
            phone = update.message.text

        context.user_data['phone'] = phone
        context.user_data['username'] = update.message.from_user.first_name

        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ CRM
        success = create_crm_deal(
            context.user_data,
            context.user_data.get('recommended_alarms', [])
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        keyboard = [['üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑']]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        if success:
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
                "–ù–∞—à –º–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ üìû\n\n"
                "–•–æ—á–µ—à—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—é?",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã!\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é üìû\n\n"
                "–•–æ—á–µ—à—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—é?",
                reply_markup=reply_markup
            )

        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in handle_phone: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ /start")
        return ConversationHandler.END


async def handle_restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
    try:
        if update.message.text == 'üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑':
            await start(update, context)
    except Exception as e:
        logger.error(f"Error in handle_restart: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)


async def health_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    await update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ! ‚úÖ")


def setup_application():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            AUTOSTART: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_autostart)],
            GSM: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gsm)],
            GPS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gps)],
            PHONE: [MessageHandler(filters.CONTACT | (filters.TEXT & ~filters.COMMAND), handle_phone)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_restart))
    application.add_handler(CommandHandler('health', health_check))
    application.add_error_handler(error_handler)

    return application


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –≤ Amvera (–µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    is_amvera = os.getenv('AMVERA_APP_NAME') is not None

    application = setup_application()

    if is_amvera:
        # –ó–∞–ø—É—Å–∫ –≤ Amvera —Å –≤–µ–±—Ö—É–∫–∞–º–∏
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Amvera")
        application.run_webhook(
            listen="0.0.0.0",
            port=WEBHOOK_PORT,
            webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}",
            secret_token='WEBHOOK_SECRET_TOKEN'
        )
    else:
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å polling
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        application.run_polling()


if __name__ == '__main__':
    main()